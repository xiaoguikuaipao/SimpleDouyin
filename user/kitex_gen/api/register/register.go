// Code generated by Kitex v0.7.1. DO NOT EDIT.

package register

import (
	api "SimpleDouyin/user/kitex_gen/api"
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return registerServiceInfo
}

var registerServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "Register"
	handlerType := (*api.Register)(nil)
	methods := map[string]kitex.MethodInfo{
		"echo":     kitex.NewMethodInfo(echoHandler, newRegisterEchoArgs, newRegisterEchoResult, false),
		"register": kitex.NewMethodInfo(registerHandler, newRegisterRegisterArgs, newRegisterRegisterResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "api",
		"ServiceFilePath": "user.thrift",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.7.1",
		Extra:           extra,
	}
	return svcInfo
}

func echoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.RegisterEchoArgs)
	realResult := result.(*api.RegisterEchoResult)
	success, err := handler.(api.Register).Echo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRegisterEchoArgs() interface{} {
	return api.NewRegisterEchoArgs()
}

func newRegisterEchoResult() interface{} {
	return api.NewRegisterEchoResult()
}

func registerHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.RegisterRegisterArgs)
	realResult := result.(*api.RegisterRegisterResult)
	success, err := handler.(api.Register).Register(ctx, realArg.Rreq)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRegisterRegisterArgs() interface{} {
	return api.NewRegisterRegisterArgs()
}

func newRegisterRegisterResult() interface{} {
	return api.NewRegisterRegisterResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Echo(ctx context.Context, req *api.Request) (r *api.Response, err error) {
	var _args api.RegisterEchoArgs
	_args.Req = req
	var _result api.RegisterEchoResult
	if err = p.c.Call(ctx, "echo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Register(ctx context.Context, rreq *api.RegisterRequest) (r *api.RegisterResponse, err error) {
	var _args api.RegisterRegisterArgs
	_args.Rreq = rreq
	var _result api.RegisterRegisterResult
	if err = p.c.Call(ctx, "register", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
